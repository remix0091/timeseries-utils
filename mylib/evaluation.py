import numpy as np
import pandas as pd
from sklearn.metrics import mean_squared_error, mean_absolute_error
from mylib.preprocess import prepare_weekly_series
from mylib.outliers import remove_outliers
from mylib.imputation import impute_series
import matplotlib.pyplot as plt

# MAPE ‚Äî —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
def mape(y_true, y_pred):
    mask = y_true != 0
    if np.any(mask):
        return np.mean(np.abs((y_true[mask] - y_pred[mask]) / y_true[mask])) * 100
    return np.nan

# WAPE ‚Äî –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
def wape(y_true, y_pred):
    denom = np.sum(np.abs(y_true))
    if denom == 0:
        return np.nan
    return np.sum(np.abs(y_pred - y_true)) / denom * 100

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
def evaluate_methods_with_mask(df, series_id, step=5, plot=True):
    """
    df        : DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ week / series_id / value
    series_id : ID —Ä—è–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "#1")
    step      : —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –º–∞—Å–∫–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    plot      : —Ä–∏—Å–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –Ω–µ—Ç

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ MSE, MAE, MAPE, WAPE
    """
    full_series = remove_outliers(prepare_weekly_series(df, series_id))

    # –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –º–∞—Å–∫–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é step-—É—é —Ç–æ—á–∫—É
    masked = full_series.copy()
    valid_idx = full_series.dropna().iloc[::step].index
    masked.loc[valid_idx] = np.nan
    na_idx = masked[masked.isna()].index

    methods = ["linear", "mean", "median", "ffill", "bfill", "spline", "rolling"]
    results = []
    predictions = {}

    for method in methods:
        filled = impute_series(masked.copy(), method=method)

        y_true = full_series.loc[na_idx].values
        y_pred = filled.loc[na_idx].values

        # —É–¥–∞–ª—è–µ–º –ø–∞—Ä—ã —Å NaN
        mask = ~(np.isnan(y_true) | np.isnan(y_pred))
        y_true, y_pred = y_true[mask], y_pred[mask]

        predictions[method] = (na_idx[mask], y_pred)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

        if len(y_true) < 3:
            results.append([method, np.nan, np.nan, np.nan, np.nan])
            continue

        mse = mean_squared_error(y_true, y_pred)
        mae = mean_absolute_error(y_true, y_pred)
        mape_ = mape(y_true, y_pred)
        wape_ = wape(y_true, y_pred)

        results.append([method, mse, mae, mape_, wape_])

    if plot:
        import matplotlib.pyplot as plt
        plt.figure(figsize=(12, 5))
        plt.plot(full_series, label="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä—è–¥", color="black", linewidth=1.5)
        plt.scatter(na_idx, full_series.loc[na_idx], label="–ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ", color="gray", marker="x")

        for method, (x, y) in predictions.items():
            plt.scatter(x, y, label=method, alpha=0.6)

        plt.title(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä—è–¥ {series_id})")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
        plt.grid(True, linestyle="--", alpha=0.4)
        plt.legend()
        plt.tight_layout()
        plt.show()

    return pd.DataFrame(results, columns=["method", "MSE", "MAE", "MAPE_%", "WAPE_%"])



def evaluate_methods_on_custom_mask(series: pd.Series, mask_idx, plot=True, methods=None, method_params=None):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–ø—É—Å–∫–∞—Ö.

    series   : –∏—Å—Ö–æ–¥–Ω—ã–π pd.Series
    mask_idx : —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤, –æ–∫–æ–Ω [(start, end)], –∏–ª–∏ –∏—Ö —Å–æ—á–µ—Ç–∞–Ω–∏–µ
    plot     : –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: DataFrame —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """

    full_series = series.copy()

    # üëá –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: [(start, end), index1, index2, ...]
    final_idx = []

    for item in mask_idx:
        if isinstance(item, tuple) and len(item) == 2:
            # —ç—Ç–æ –æ–∫–Ω–æ (start, end)
            start, end = item
            final_idx.extend(series.index[start:end + 1])
        elif pd.Timestamp(item) in series.index:
            # –æ–¥–∏–Ω–æ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            final_idx.append(item)
        else:
            continue

    mask_idx = pd.Index(final_idx)

    masked = full_series.copy()
    masked.loc[mask_idx] = np.nan

    if methods is None:
        methods = ["linear", "mean", "median", "ffill", "bfill", "spline", "rolling"]
    if method_params is None:
        method_params = {}
    results = []
    predictions = {}

    for method in methods:
        params = method_params.get(method, {})
        filled = impute_series(masked.copy(), method=method, **params)

        y_true = full_series.loc[mask_idx].values
        y_pred = filled.loc[mask_idx].values

        ok = ~(np.isnan(y_true) | np.isnan(y_pred))
        y_true, y_pred = y_true[ok], y_pred[ok]
        predictions[method] = (mask_idx[ok], y_pred)

        if len(y_true) < 3:
            results.append([method, np.nan, np.nan, np.nan, np.nan])
            continue

        mse = mean_squared_error(y_true, y_pred)
        mae = mean_absolute_error(y_true, y_pred)
        mape_ = mape(y_true, y_pred)
        wape_ = wape(y_true, y_pred)

        results.append([method, mse, mae, mape_, wape_])

    if plot:
        plt.figure(figsize=(12, 5))
        plt.plot(series, label="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä—è–¥", color="black", linewidth=1.5)
        plt.scatter(mask_idx, full_series.loc[mask_idx], label="–ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ", color="gray", marker="x")

        for method, (x, y) in predictions.items():
            plt.scatter(x, y, label=method, alpha=0.6)

        plt.title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Ä—É—á–Ω–∞—è –º–∞—Å–∫–∞)")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
        plt.grid(True, linestyle="--", alpha=0.4)
        plt.legend()
        plt.tight_layout()
        plt.show()

    return pd.DataFrame(results, columns=["method", "MSE", "MAE", "MAPE_%", "WAPE_%"])
